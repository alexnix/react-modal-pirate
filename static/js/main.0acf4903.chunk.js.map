{"version":3,"sources":["../../src/defaults.ts","../../src/ModalContex.ts","../../src/useOpen.ts","../../src/ModalProvider.tsx","Modal1.tsx","BasicDemo.tsx","InlineStyleDemo.tsx","StyledDemo.tsx","Modal2.tsx","MultipleModalsDemo.tsx","apis/ModalProviderApi.tsx","apis/UseOpenApi.tsx","apis/UseCloseApi.tsx","App.tsx","index.tsx"],"names":["defaultConfigs","default","open","component","defaultContext","config","setConfig","ModalContex","createContext","useOpen","useContext","openOptions","style","children","styles","content","overlay","useState","closeModal","name","modals","Object","modalName","modalConfig","key","isOpen","onRequestClose","ariaHideApp","ModalCtx","value","Modal1","BasicDemo","openModal","language","className","onClick","InlineStyleDemo","width","maxWidth","margin","padding","textAlign","background","StyledDemo","Modal2","openInNew","MultipleModalsDemo","ModalProviderApi","JSON","stringify","small","height","UseOpenApi","openIn","UseCloseApi","DEMOS","Basic","Styled","APIS","ModalProvider","useClose","App","selectedDemo","setSelectedDemo","selectedApi","setSelectedApi","position","display","alignItems","justifyContent","href","target","keys","map","k","demo","a","api","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0acf4903.chunk.js","sourcesContent":["import { Dict, ModalConfig, ModalContext } from './types'\n\nexport const defaultConfigs: Dict<ModalConfig> = {\n  default: { open: false, component: null }\n}\n\nexport const defaultContext: ModalContext = {\n  config: defaultConfigs,\n  setConfig: null\n}\n\n","import { createContext } from 'react'\nimport { defaultContext } from './defaults'\n\nconst ModalContex = createContext(defaultContext)\n\nexport default ModalContex\n","import { useContext, ReactNode } from 'react'\nimport ModalContex from './ModalContex'\nimport { OpenOptions } from './types'\n\nconst useOpen = () => {\n  const { setConfig } = useContext(ModalContex)\n  return (component: ReactNode, openOptions: OpenOptions = {}) =>\n    setConfig!((prev) => ({\n      ...prev,\n      [openOptions.openIn || openOptions.openInNew || 'default']: {\n        open: true,\n        component,\n        style: openOptions?.style\n      }\n    }))\n}\n\nexport default useOpen\n","import React, { useState } from 'react'\nimport { Dict, ModalConfig, ModalProviderProps } from './types'\nimport ModalCtx from './ModalContex'\nimport Modal from 'react-modal'\n\nimport { defaultConfigs } from './defaults'\n\nconst ModalProvider: React.FC<ModalProviderProps> = ({ children, styles }) => {\n  styles = {\n    default: {\n      content: {},\n      overlay: {}\n    },\n    ...styles\n  }\n\n  const [config, setConfig] = useState<Dict<ModalConfig>>(defaultConfigs)\n\n  const closeModal = (name: string) => () => {\n    setConfig((prev) => ({ ...prev, [name]: { open: false, component: null } }))\n  }\n\n  const modals = []\n  for (const [modalName, modalConfig] of Object.entries(config)) {\n    let content, overlay\n    if (typeof modalConfig.style === 'object') {\n      ;({ content, overlay } = modalConfig.style)\n    } else {\n      ;({ content, overlay } = styles[modalConfig.style || 'default'])\n    }\n\n    modals.push(\n      <div key={modalName}>\n        <Modal\n          isOpen={modalConfig.open}\n          onRequestClose={closeModal(modalName)}\n          style={{\n            content,\n            overlay\n          }}\n          ariaHideApp={false}\n        >\n          {modalConfig.component}\n        </Modal>\n      </div>\n    )\n  }\n\n  return (\n    <ModalCtx.Provider value={{ config, setConfig }}>\n      {modals}\n      {children}\n    </ModalCtx.Provider>\n  )\n}\n\nexport default ModalProvider\n","import React from 'react'\n\ninterface Modal1Props {}\n\nconst Modal1: React.FC<Modal1Props> = () => {\n  return <h1>Hello World</h1>\n}\n\nexport default Modal1\n","import React from 'react'\nimport { useOpen } from 'react-modal-pirate'\nimport Modal1 from './Modal1'\nimport Highlight from 'react-highlight.js'\n\ninterface BasicDemoProps {}\n\nconst BasicDemo: React.FC<BasicDemoProps> = () => {\n  const openModal = useOpen()\n\n  return (\n    <div>\n      <Highlight language='jsx'>{`import ModalProvider, { useOpen } from \"react-modal-pirate\"\n\nconst Demo: () => {\n  const openModal = useOpen()\n\n  return <button onClick={() => openModal(<h1>Hello World</h1>)}>Open</button>\n}\n\nconst App = () => {\n  return (\n    <ModalProvider>\n      <Demo/>\n    </ModalProvider>\n  )\n}`}</Highlight>\n      <button\n        className='button'\n        onClick={() => {\n          openModal(<Modal1 />)\n        }}\n      >\n        Open Modal\n      </button>\n    </div>\n  )\n}\n\nexport default BasicDemo\n","import React from 'react'\nimport { useOpen } from 'react-modal-pirate'\nimport Modal1 from './Modal1'\nimport Highlight from 'react-highlight.js'\n\ninterface InlineStyleDemoProps {}\n\nconst InlineStyleDemo: React.FC<InlineStyleDemoProps> = () => {\n  const openModal = useOpen()\n\n  return (\n    <div>\n      <Highlight language='jsx'>\n        {`import ModalProvider, { useOpen } from \"react-modal-pirate\"\n\nconst Demo = () => {\n  const openModal = useOpen()\n\n  return (\n      <button\n        className='button'\n        onClick={() => \n          openModal(<Modal1 />, {\n            style: {\n              content: {\n                width: '300px',\n                maxWidth: '100%',\n                margin: 'auto',\n                padding: '50px',\n                textAlign: 'center'\n              },\n              overlay: {\n                background: 'rgba(255, 0, 0, .4)'\n              }\n            }\n          })\n        }\n      >\n        Open Modal\n      </button>\n  )\n}\n\nconst App = () => {\n  return (\n    <ModalProvider>\n      <Demo/>\n    </ModalProvider>\n  )\n}`}\n      </Highlight>\n      <button\n        className='button'\n        onClick={() => {\n          openModal(<Modal1 />, {\n            style: {\n              content: {\n                width: '300px',\n                maxWidth: '100%',\n                margin: 'auto',\n                padding: '50px',\n                textAlign: 'center'\n              },\n              overlay: {\n                background: 'rgba(255, 0, 0, .4)'\n              }\n            }\n          })\n        }}\n      >\n        Open Modal\n      </button>\n    </div>\n  )\n}\n\nexport default InlineStyleDemo\n","import React from 'react'\nimport { useOpen } from 'react-modal-pirate'\nimport Modal1 from './Modal1'\nimport Highlight from 'react-highlight.js'\n\ninterface StyledDemoProps {}\n\nconst StyledDemo: React.FC<StyledDemoProps> = () => {\n  const openModal = useOpen()\n\n  return (\n    <div>\n      <Highlight language='jsx'>{`import ModalProvider, { useOpen } from \"react-modal-pirate\"\n\nconst Demo = () => {\n  const openModal = useOpen()\n  \n  return <button onClick={() => openModal(<h1>Hello World</h1>, {style:\"small\"})}>Open Modal</button>\n}\n\nconst App = () => {\n  rerturn (\n    <ModalProvider styles={{\n      small: {\n        content: {\n          height: 'fit-content',\n          width: '300px',\n          maxWidth: '100%',\n          position: 'unset'\n        },\n        overlay: {\n          background: 'rgba(0, 0, 0, .4)',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center'\n        }\n      }\n    }}>\n      <Demo/>\n    </ModalProvider>\n  )\n}`}</Highlight>\n      <button\n        className='button'\n        onClick={() => {\n          openModal(<Modal1 />, { style: 'small' })\n        }}\n      >\n        Open Modal\n      </button>\n    </div>\n  )\n}\n\nexport default StyledDemo\n","import React from 'react'\nimport { useOpen } from 'react-modal-pirate'\nimport Modal1 from './Modal1'\n\ninterface Modal2Props {}\n\nconst Modal2: React.FC<Modal2Props> = () => {\n  const openModal = useOpen()\n  return (\n    <div>\n      <h1>First Modal</h1>\n      <button\n        className='button'\n        onClick={() =>\n          openModal(<Modal1 />, { style: 'small', openInNew: 'foobar' })\n        }\n      >\n        Open Nested Modal\n      </button>\n    </div>\n  )\n}\n\nexport default Modal2\n","import React from 'react'\nimport { useOpen } from 'react-modal-pirate'\nimport Modal2 from './Modal2'\nimport Highlight from 'react-highlight.js'\n\ninterface MultipleModalsDemoProps {}\n\nconst MultipleModalsDemo: React.FC<MultipleModalsDemoProps> = () => {\n  const openModal = useOpen()\n\n  return (\n    <div>\n      <Highlight language='jsx'>\n        {`import ModalProvider, { useOpen } from 'react-modal-pirate'\n\nconst Modal = () => {\n  const openModal = useOpen()\n\n  return (\n    <div>\n      <h1>First Modal</h1>\n      <button onClick={() => openModal(<h1>Hello World</h1>, { style:\"small\", openInNew:\"foobar\" })}>Open Nested Modal</button>\n    </div>\n  )\n}\n\nconst Demo = () => {\n  const openModal = useOpen()\n\n  return <button onClick={() => openModal(<Modal/>)}>Open Modal</button>\n}\n\nconst App = () => {\n  return (\n    <ModalProvider styles={{\n      small: {\n        // See Styled Demo for the styles here\n      }\n    }}>\n      <Demo/>\n    </ModalProvider>\n  )\n}\n`}\n      </Highlight>\n      <button className='button' onClick={() => openModal(<Modal2 />)}>\n        Open Modal\n      </button>\n    </div>\n  )\n}\n\nexport default MultipleModalsDemo\n","import React from 'react'\n\ninterface ModalProviderApiProps {}\n\nconst ModalProviderApi: React.FC<ModalProviderApiProps> = () => {\n  return (\n    <div>\n      <code>{'<ModalProvider styles={{}}></ModalProvider>'}</code>\n      <h3>Attributes</h3>\n      <table>\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Type</th>\n            <th>Description</th>\n            <th>Example(s)</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>styles</td>\n            <td>{'Dict<StyleOption>'}</td>\n            <td>\n              Define one or multiple set of StyleOption. A style set`s name is\n              its key (will be used as the <i>style</i> property in OpenOptions\n              when opening a modal) and its value is an object with one or both\n              of the <i>content</i> and <i>overlay</i> keys.\n            </td>\n            <td>\n              <pre>\n                {JSON.stringify(\n                  {\n                    small: {\n                      overlay: {\n                        background: 'rgba(0, 0, 0, .4)'\n                      },\n                      content: {\n                        height: 'min-content'\n                      }\n                    }\n                  },\n                  null,\n                  2\n                )}\n              </pre>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\nexport default ModalProviderApi\n","import React from 'react'\n\ninterface UseOpenApiProps {}\n\nconst UseOpenApi: React.FC<UseOpenApiProps> = () => {\n  return (\n    <div>\n      <code>{'const openModal = useOpen()'}</code>\n      <h3>Parameters</h3>\n      <i>None</i>\n      <h3>Returns</h3>\n      <code>(component: ReactNode, openOptions?: OpenOptions) ={'>'} void</code>\n      <h3>Parameters</h3>\n      <table>\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Type</th>\n            <th>Description</th>\n            <th>Example(s)</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>component</td>\n            <td>ReactNode</td>\n            <td>The React component that will be displayed in the modal.</td>\n            <td>{'<div>Modal here</div>'}</td>\n          </tr>\n          <tr>\n            <td>openOptions</td>\n            <td>OpenOptions</td>\n            <td>\n              Options that controls the style of the modal, can be one of the\n              style sets defined with <i>ModalProvider</i>, or can be inline\n              styles. Also if a new modal is needed, use the openInNew field.\n              Use the openIn field to open in a specific modal, when multiple\n              modals available.\n            </td>\n            <td>\n              <pre>\n                {JSON.stringify(\n                  { style: 'small', openInNew: 'foobar' },\n                  null,\n                  2\n                )}\n              </pre>\n              <hr />\n              <pre>\n                {JSON.stringify(\n                  { style: { content: {}, overlay: {} }, openIn: 'foobar' },\n                  null,\n                  2\n                )}\n              </pre>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\nexport default UseOpenApi\n","import React from 'react'\n\ninterface UseCloseApiProps {}\n\nconst UseCloseApi: React.FC<UseCloseApiProps> = () => {\n  return (\n    <div>\n      <code>{'const closeModal = useClose()'}</code>\n      <h3>Parameters</h3>\n      <i>None</i>\n      <h3>Returns</h3>\n      <code>(name?: string) ={'>'} void</code>\n      <h3>Parameters</h3>\n      <table>\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Type</th>\n            <th>Description</th>\n            <th>Example(s)</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>name</td>\n            <td>string</td>\n            <td>\n              Use this parameter to close a modal by its name. A modal in given\n              a name when <i>openInNew</i> option is used, for opening multiple\n              modals at the same time.\n            </td>\n            <td>foobar</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\nexport default UseCloseApi\n","import React, { useState } from 'react'\nimport ModalProvider from 'react-modal-pirate'\nimport BasicDemo from './BasicDemo'\nimport InlineStyleDemo from './InlineStyleDemo'\nimport StyledDemo from './StyledDemo'\nimport MultipleModalsDemo from './MultipleModalsDemo'\nimport ModalProviderApi from './apis/ModalProviderApi'\nimport UseOpenApi from './apis/UseOpenApi'\nimport UseCloseApi from './apis/UseCloseApi'\n\nconst DEMOS = {\n  Basic: <BasicDemo />,\n  Styled: <StyledDemo />,\n  'Inline Style': <InlineStyleDemo />,\n  'Multiple Modals': <MultipleModalsDemo />\n}\n\nconst APIS = {\n  ModalProvider: <ModalProviderApi />,\n  useOpen: <UseOpenApi />,\n  useClose: <UseCloseApi />\n}\n\nconst App = () => {\n  const [selectedDemo, setSelectedDemo] = useState<string | null>('Basic')\n  const [selectedApi, setSelectedApi] = useState<string | null>(null)\n\n  const selectDemo = (demo: string) => () => {\n    setSelectedDemo(demo)\n    setSelectedApi(null)\n  }\n\n  const selectApi = (api: string) => () => {\n    setSelectedDemo(null)\n    setSelectedApi(api)\n  }\n\n  return (\n    <ModalProvider\n      styles={{\n        small: {\n          content: {\n            height: 'fit-content',\n            width: '300px',\n            maxWidth: '100%',\n            position: 'unset'\n          },\n          overlay: {\n            background: 'rgba(0, 0, 0, .4)',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center'\n          }\n        }\n      }}\n    >\n      <div className='p-30'>\n        <h1>react-modal-pirate</h1>\n        <p>This library makes it (even) easier to crate modals in React, using <a href=\"https://www.npmjs.com/package/react-modal\" target=\"_new\">react-modal</a> under the hood.</p>\n        <p>\n          The core idea is that there is no need to have more then one{' '}\n          <i>{'<Modal>'}</i> tag in any application*. Therefore, react-modal-pirate\n          abstracts away the <i>{'<Modal>'}</i> tag and offers easy to use React\n          hooks to open and close modals.\n        </p>\n        <p>\n          Similarly, there is no need to write the modal CSS style more than\n          once, therefore react-modal-pirate gives a way to define the style sets in its\n          root tag. When opening a modal the style set can be specified by its name.\n          There is also the option to have inline styles for each modal, though\n          this should be a very rare case and is not probably not a good choice\n          for most scenarios.\n        </p>\n        <p>\n          * in the rare cases when nested modals are needed, this means multiple{' '}\n          <i>{'<Modal>'}</i> tags will be needed. react-modal-pirate has can create\n          more then one <i>{'<Modal>'}</i> tag by specifying a proper setting when opening the modal, namely the <i>openInNew</i> option.\n        </p>\n        <h2>Installation</h2>\n        <h3>yarn add react-modal-pirate</h3>\n        or\n        <h3>npm install --save react-modal-pirate</h3>\n      </div>\n      <div className='flex-row'>\n        <div className='p-30'>\n          <h3>Demos</h3>\n          <ul className='menu'>\n            {Object.keys(DEMOS).map((k) => (\n              <li key={k} onClick={selectDemo(k)}>\n                {k}\n              </li>\n            ))}\n          </ul>\n          <h3>APIs</h3>\n          <ul className='menu'>\n            {Object.keys(APIS).map((a) => (\n              <li onClick={selectApi(a)}>{a}</li>\n            ))}\n          </ul>\n        </div>\n        <div className='p-30'>\n          <h3>{selectedDemo || selectedApi}</h3>\n          {selectedDemo ? DEMOS[selectedDemo!] : APIS[selectedApi!]}\n        </div>\n      </div>\n    </ModalProvider>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}